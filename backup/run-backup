#!/bin/bash

set -eo pipefail

host="tack"

if [[ -z "$BACKUPNAME" ]]; then
  echo "\$BACKUPNAME unset, aborting" >&2
  exit 1
fi

sed -i "s/^snapshot_root.*/snapshot_root\t\/host\/mnt\/${BACKUPNAME}\/${host}\//" /rsnapshot.conf

tmpdir="$(mktemp -d)"
trap "rm -rf $tmpdir" EXIT

if [[ "$LEVEL" = "daily" ]]; then
  /usr/bin/nice /usr/bin/nocache /usr/bin/rsnapshot -c /rsnapshot.conf sync && /usr/bin/nice /usr/bin/nocache /usr/bin/rsnapshot -c /rsnapshot.conf daily
  /push-metrics-backup-done $BACKUPNAME $host daily.0 $(date +%s) 99999  # TODO find out real backup size from rsync output, like below for data
  # TODO also set daily.N metrics (N>=1) to previous daily.(N-1) values

  # TODO lock file
  date '+[%d/%b/%Y:%H:%M:%S] starting data backup'
  /usr/bin/nice /usr/bin/nocache /usr/bin/rsync -v -a --numeric-ids "/host/media/data/" "/host/mnt/$BACKUPNAME/${host}/data/" | tee "$tmpdir/data-rsync"
  size=$(cat "$tmpdir/data-rsync" | perl -ne '/^total size is (.*?) / && print $1' | sed 's/,//g')
  /push-metrics-backup-done $BACKUPNAME $host data $(date +%s) $size
  date '+[%d/%b/%Y:%H:%M:%S] data backup finished'

else
  /usr/bin/nice /usr/bin/nocache /usr/bin/rsnapshot -c /rsnapshot.conf $LEVEL
  # TODO push corresponding metrics update
fi
